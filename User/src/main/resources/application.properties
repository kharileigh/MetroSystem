# add the JDBC details to connect to the database:
# the driver address from MySQL WorkBench
spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver

# to connect to the database:
# the 'JBDC connection string', followed by the database name:
spring.datasource.url = jdbc:mysql://127.0.0.1:3306/MetroSystem

#the database username:
spring.datasource.username = root

#the database password:
spring.datasource.password = fiveteen

# ddl-auto : create - if the schema(table structure) exists, drop that structure and recreate it
# use this to initially create the table (if it does not exist before running the app)
# spring.jpa.hibernate.ddl-auto = create

# then use this to continue using the exisitng table (otherwise the data will be wiped for each run)
# ddl-auto : update - if the schema(table structure) exists use it, otherwise create new table
spring.jpa.hibernate.ddl-auto = update

# responsible for converting JPQL(Java Persistence Query Language) in MySQL:
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

# display generated SQL queries on console:
spring.jpa.show-sql = true

# create all the queries by picking the names mentioned in mapping:
# SpringBoot2 creates query by seperating property names with '_' (underscore) by default
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# close the connection:
spring.jpa.properties.hibernate.enable_lazy_load_no_trans = true

# the port number
server.port=8084